"""Initial migration

Revision ID: 22fb8a80c522
Revises: 
Create Date: 2024-09-06 12:12:31.720707

"""
from pathlib import Path
from typing import Sequence, Union

from alembic import op
from sqlalchemy import text
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '22fb8a80c522'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_authors_id'), 'authors', ['id'], unique=False)
    op.create_table('books',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_books_id'), 'books', ['id'], unique=False)
    op.create_table('tags',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_table('book_author',
                    sa.Column('book_id', sa.Integer(), nullable=False),
                    sa.Column('author_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ),
                    sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
                    sa.PrimaryKeyConstraint('book_id', 'author_id')
                    )
    op.create_table('book_tag',
                    sa.Column('book_id', sa.Integer(), nullable=False),
                    sa.Column('tag_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
                    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
                    sa.PrimaryKeyConstraint('book_id', 'tag_id')
                    )
    # ### end Alembic commands ###

    with Path('scripts/authors.sql').open('r', encoding='utf-8') as f:
        sql_script = f.read()

    op.execute(text(sql_script))

    with Path('scripts/books.sql').open('r', encoding='utf-8') as f:
        sql_script = f.read()

    op.execute(text(sql_script))

    with Path('scripts/tags.sql').open('r', encoding='utf-8') as f:
        sql_script = f.read()

    op.execute(text(sql_script))

    with Path('scripts/book_author.sql').open('r', encoding='utf-8') as f:
        sql_script = f.read()

    op.execute(text(sql_script))

    with Path('scripts/book_tag.sql').open('r', encoding='utf-8') as f:
        sql_script = f.read()

    op.execute(text(sql_script))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('book_tag')
    op.drop_table('book_author')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_books_id'), table_name='books')
    op.drop_table('books')
    op.drop_index(op.f('ix_authors_id'), table_name='authors')
    op.drop_table('authors')
    # ### end Alembic commands ###
